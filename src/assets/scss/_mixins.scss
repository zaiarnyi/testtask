//Адаптивное свойство
@mixin adaptiv-value($property, $startSize, $minSize, $type) {
	$addSize: $startSize - $minSize;
	@if $type==1 {
		#{$property}: $startSize + px;
		@media (max-width: #{$maxWidthContainer + px}) {
			#{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 360px) / #{$maxWidthContainer - 320}));
		}
	} @else if $type==2 {
		#{$property}: $startSize + px;
		@media (min-width: #{$maxWidthContainer + px}) {
			#{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 360px) / #{$maxWidth - 320}));
		}
	} @else {
		//Всегда
		#{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 360px) / #{$maxWidth - 320}));
	}
}
@function svg-url($svg) {
	@if not str-index($svg, xmlns) {
		$svg: str-replace($svg, "<svg", '<svg xmlns="http://www.w3.org/2000/svg"');
	}
	$encoded: "";
	$slice: 2000;
	$index: 0;
	$loops: ceil(str-length($svg) / $slice);

	@for $i from 1 through $loops {
		$chunk: str-slice($svg, $index, $index + $slice - 1);
		$chunk: str-replace($chunk, '"', "'");
		$chunk: str-replace($chunk, "%", "%25");
		$chunk: str-replace($chunk, "#", "%23");
		$chunk: str-replace($chunk, "{", "%7B");
		$chunk: str-replace($chunk, "}", "%7D");
		$chunk: str-replace($chunk, "<", "%3C");
		$chunk: str-replace($chunk, ">", "%3E");
		$encoded: #{$encoded}#{$chunk};
		$index: $index + $slice;
	}

	@return url("data:image/svg+xml,#{$encoded}");
}

//  Background svg mixin
@mixin background-svg($svg) {
	background-image: svg-url($svg);
}

//  Helper function to replace characters in a string
@function str-replace($string, $search, $replace: "") {
	$index: str-index($string, $search);
	@return if(
		$index,
		str-slice($string, 1, $index - 1) + $replace +
			str-replace(
				str-slice($string, $index + str-length($search)),
				$search,
				$replace
			),
		$string
	);
}